package PracticeGenralProgramming;

import java.lang.reflect.Array;
import java.sql.Time;
import java.util.LinkedList;
import java.util.Random;

import org.apache.commons.logging.Log;

import com.opera.core.systems.scope.protos.SelftestProtos.SelftestResult.Result;
import com.opera.core.systems.scope.protos.UmsProtos.Format;

public class TestClass 
{	

	public void  testsum (short a, short b) 
	{	
		System.out.println("short a, short b");
	}


	public void  testsum (double a, double b) 
	{		
		System.out.println("float a, float b");
	}

	
	public static void  sum (int a, int b) throws ArithmeticException
	{		
		if (b==5) 		throw new ArithmeticException("b should not be 5 "); 					
		else if(a>b)	throw new ArithmeticException("a should not be greater that b");
		
		
		try {
			a=a/b;
		} catch (Exception e) {
			System.out.println("devide by zero exception");
		} 
		
	}
	

/*
 *  * ATOI function (convert strings of integer.
 */

public static int StringToInteger(String str){
		int len = str.length(),sum=0;
		
			for (int i=0;i<len;i++)
			{	
				if(str.charAt(i)<'0' || str.charAt(i)>'9')
					{
						System.out.println("NOT POSSIBLE");
						return 0;
					}			
				 sum = sum*10 + (str.charAt(i)-'0');
			}
		return sum;
	}
	
/*
 *	What is a magic number?
	Example: 1729
    Find the sum of digits of the given number.(1 + 7 + 2 + 9 => 19)
    Reverse of digit sum output.  Reverse of 19 is 91
    Find the product of digit sum and the reverse of digit sum.(19 X 91 = 1729)
    If the product value and the given input are same, then the given number is a magic number.(19 X 91 <=> 1729)
    So, 1729 is a magic number.
 * 
 */
public static boolean CheckIfNumberIsMagicNumber(int num){
	
	
	int sum=0,temp_num=num;
	
		while(temp_num>0)
		{		
			sum =sum+temp_num%10;
			temp_num=temp_num/10;
		}
		System.out.println(sum);

	
			int temp_sum=sum,rev_sum=0;
			while(temp_sum>0)
			{
				rev_sum=rev_sum*10+(temp_sum%10);	
				temp_sum=temp_sum/10;
			}
			System.out.println(rev_sum);

	
		if(sum*rev_sum==num)
		return true;
		else
		return false;
			
}

/*
 * 
	//	program to Check Armstrong Number
	//	If the sum of cubes of individual digit is equal to that number itself. 
	//	For example:
	//	153 = 1*1*1 + 5*5*5 + 3*3*3  // 153 is an Armstrong number.
	//	12 is not equal to 1*1*1+2*2*2  // 12 is not an Armstrong number.
 *
 */	
public static boolean ChekIfNumberIsAmrstrong_01(int num){
		
		int sum=0,temp_num=num,x;
		while(temp_num!=0)
		{
			x=temp_num%10;			
			sum = sum+x*x*x;
			temp_num=temp_num/10;			
		}

		if (num==sum) return true;
		else return false;
	}
		
//26) Write code for Generate Random No in a range from min to max?
public static int GetRamdonNumberInGivenRange(int start, int end){
		
		Random rn= new Random();
		int random_number;

		for(int i=0;;)
		{					
			random_number=start + (int)(Math.random() * ((end - start) + 1));	
			//random_number =	rn.nextInt(end-start+1)+start;			
			return random_number;			
		}
		
}
	
//19) Write code to check whether a no is power of two or not?		
public static void CheckIfNumberIsPowerOfTwo(int num){
	int temp_num=num, count=0,sum=1;	

	while(temp_num>1)
	{
		temp_num=temp_num/2;
		count=count+1;
	}
	
for (int i=0;i<count;i++)
	{	sum=sum*2;	}

if(num==sum)
	System.out.println("YES");
else
	System.out.println("NO");
}	
		
//8)Given two arrays, 1,2,3,4,5 and 2,3,1,0,5 find which number is not present in the second array.		
public static void CompareNumbersInSecondArray(int [] arr1, int []arr2)	{

	int arr1_len=arr1.length, arr2_len=arr2.length;
	int count;
	
	for (int i=0; i<arr1_len;i++){		
		count=0;
		for(int j=0;j<arr2_len;j++){
				if(arr1[i]==arr2[j]){
					count=1;
					break;
				}
		}
		
		if (count==0)
		{
			System.out.println("Integer value : "+arr1[i]+" of array 1 not found in array 2");
		}
	}
	
	
}
			
public static int[] Array_Bubble_Sort(int[] arr){
		
		int len = arr.length;

		int temp;		
		for(int i=0;i<len;i++)
		{			
			for (int j=i+1;j<len;j++)
			{
				if(arr[i]<arr[j])
					{
						temp = arr[i];						
						arr[i]=arr[j];
						arr[j]=temp;
					}
			}
		}
		
		return arr;
	}

public static boolean ChekIfNumberIsAmrstrong(int num){

		char ch[]=Integer.toString(num).toCharArray();

		int sum = 0;		
		for(char a:ch){
			int x= Integer.parseInt(String.valueOf(a));
			sum =sum+x*x*x;			
		}
		if (num==sum) return true;
		else return false;
	}

public static int GetFactorialNumber(int num)
{
		int fact = num;
		
		for (int i=1;i<num;i++)
		{
			fact=(fact)*(num-i);
		}		
		return fact;
	}
	
public static void EvenNumber_GetEvenNumbers(int start , int end){		
		for (int i=start; i<end; i++){			
			if(i%2==0)
				System.out.println(i);			
		}
	}
	
public static boolean CheckIfNumberIsEven(int num){
		if(num%2==0) return true;
		else return false;		
	}
	
public static boolean LeapYear_ChekIfYearIsLeapYear(int year)
{
		if (year%400 ==0)			
			return true;
		else if (year%100==0)
			return false;
		else if (year%4==0)		
			return true;
		else return false;
	}

	
public  String ReverseString_UsingcharAt(String str)
{
		//Reverse String without using StringBuffer

		int lenght =str.length();	
		char tempchararr[] = new char[lenght];
			
		for (int i=lenght-1,j=0;i>=0; i--,j++)
		{
			tempchararr[j]=str.charAt(i); 	
		}	
		return String.valueOf(tempchararr);	
	}
	
	
public String ReverseString_UsingCharrArray(String str)
{
		//Reverse String without using String Buffer
		
		int lenght =str.length();
		char tempstrchararr [] = str.toCharArray();		
		char tempchararr[] = new char[lenght];
		
		for (int i=lenght-1,j=0;i>=0; i--,j++)
		{
			tempchararr[j]=tempstrchararr [i];
			//System.out.println(tempchararr[j]);
		}
		
		return String.valueOf(tempchararr);
	}

	
public String ReverseString_UsingRecurtion(String str)
{
		return str;
	}
	
	
public boolean CheckIfPrimeNumber(int num)
{
		boolean result=true;
		
		for (int i=1; i<num; i++)
		{
			if (num%i == 0)
			{
				result=false; break;									
			}
		}	

		return result;
	}

	
public LinkedList<Integer> getFibboncieSeriesAsArray(int num)
{
		int first=0,sec=1,sum=0;

		LinkedList<Integer> lst = new LinkedList<Integer>();
		
		for (int i=0;i<num;i++)
		{
	 
			if(i==0) { lst.add(0); }
			else if (i==1) { lst.add(1); }
			else if (sum>=num) break;
			else
				{
					sum=first+sec;
					first = sec;
					lst.add(sum);
					sec=sum;
				}
			
		}	
		return lst;		
}

	
public static void  RemoveDuplicateFromArray(int [] arr){
		
		int len =arr.length;
		int count=0;
		
		for (int i=0; i<len ;i++){			
			count=0;
				for (int j=0;j<len;j++){
					if (i!=j && arr[i]==arr[j]) { count =count +1;}				
	 			}		
				
			if(count==0)
			System.out.println(arr[i]);			
		}
	}

	
public boolean CheckIfDuplicateExistInArray(int [] arr)	
{	
		int len =arr.length;
		int count=0;
		
		for(int i=0;i<len-1;i++)
		{
			for (int j=0;j<len-1;j++)
			{
				if(i!=j && arr[i]==arr[j])
				{
					count =count +1;
				}
			}						
		}

		if(count>0)		return true;
		else 			return false ;
	}
	

public  static String RemoveDuplicateCharFromString(String str)
{
		char arr_str [] = str.toCharArray();
		int len_str =str.length();
		char tempstrarr [] = new char [len_str];
		int tempstrarr_index=0;
		int j=0;

		for (int i=0; i<len_str;i++)
			{
			int tempcount=0;			
			for(j=0;j<tempstrarr.length;j++)
					{
						if(arr_str[i]==tempstrarr[j])
						tempcount=1;
					}
				
				if(tempcount==0)
				{
					tempstrarr[tempstrarr_index]=arr_str[i];
					tempstrarr_index=tempstrarr_index+1;
				}
			}		
		
		String return_str= "";
		for (char ch : tempstrarr)
			return_str=return_str+ch;
		
		return return_str;
	}

	
public String RemoveCharacterFromString(char ch,String str)
{
		int len = str.length();
		String new_string="";
		int count=0;
		
		for (int i=0;i<len;i++)
		{			
			if (ch==str.charAt(i))
			{ 
				count = count +1;
			}
			else
				new_string=new_string.concat(String.valueOf(str.charAt(i)));
		}
	
		if (count ==0)
		System.out.println("Character does not exist in given string");
		
		return new_string;	
	}
	
	
public LinkedList<String> getStringPermutation(String str){		
		LinkedList<String> lst=new LinkedList<String>();
		int len= str.length();
		
		for(int i=0;i<len-1;i++){			
			String sub_str =RemoveCharacterFromString(str.charAt(i), str);
				System.out.println(str.charAt(i) + sub_str);
				System.out.println(ReverseString_UsingcharAt(str.charAt(i) + sub_str));
			getStringPermutation(str.charAt(i)+sub_str);
		}
		
		return lst;
	}

	
public static int GetCharCountInString(String str, char ch)
{
		char strarr [] = str.toCharArray();
		int str_len =str.length();
		int count=0;		
			for(int i=0; i<str_len;i++)
			{	
				if(strarr[i]==ch)	count++;
			}				
			return count;
	}
	
public static void permutation(String prefix, String str)
{ 
		 int n = str.length(); 
		 if (n == 0) System.out.println(prefix); 
		 else { 
			   for (int i = 0; i < n; i++) 
				   permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1));
			  } 
	  } 

}//End TestClass

