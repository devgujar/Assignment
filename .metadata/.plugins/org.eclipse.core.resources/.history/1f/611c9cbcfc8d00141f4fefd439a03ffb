package PracticeGenralProgramming;

import java.util.LinkedList;

import javax.naming.LinkRef;

import com.google.common.primitives.Chars;


public class Top_Ten_Programs extends TestClass {
	

	
/*	**************	PROGRAMS on STRING	****************************** */

//	1.	Write a program to reverse String.	

	public static String Reverse_String_01(String str) {
		int lenght= str.length();
		System.out.println("String lenght:" +lenght);		
		
		char temp_str[]=str.toCharArray();
		char rev_str[]=	new char[lenght];
				
		for (int i=0,j=lenght-1;i<=lenght-1; i++,j--)
		{
			rev_str[i]=temp_str[j];
		}		
		return String.valueOf(rev_str);		
	} 


	public static String Reverse_String(String str){		
		int lenght= str.length();
		char temp_str[]= new char[lenght];
		
		for (int i=0,j=lenght-1;i <=lenght-1; i++,j--)
		{
			temp_str[i]=str.charAt(j);
		}		

		return String.valueOf(temp_str);		
	} 

		
//	2. 	Write a program to Check if given String is Palindrom. 	/* e.g. MADAM :: String and its reverse are equal */	
public static boolean Check_Given_String_is_Palindrom(String str)	
	{
		int lenght= str.length();
		char temp_str[] =new char[lenght];

		for (int i=0,j=lenght-1 ; i<=lenght-1; i++,j--)
		{
			temp_str[i]= str.charAt(j);
		}
		
		if (str.equals(String.valueOf(temp_str)))	return true;
		else return false;
	}

//2.1 	Write a program to Check if given String or number is Palindrom. 	/* e.g. MADAM :: String and its reverse are equal */
//implement overloading
public static boolean Check_Given_String_or__is_Palindrom(String str)
{
	int lenght= str.length();
	char temp_str[] =new char[lenght];

	for (int i=0,j=lenght-1 ; i<=lenght-1; i++,j--)
	{
		temp_str[i]= str.charAt(j);
	}
	
	if (str.equals(String.valueOf(temp_str)))	return true;
	else return false;
}	
public static boolean Check_Given_String_or__is_Palindrom(int num){
	int temp_num=num, rev_num=0;
	
	while(temp_num>0){		
		rev_num=rev_num*10+temp_num%10;
		temp_num=temp_num/10;
	}
	
	if (rev_num==num) return true;
	else return false;
}

//	3.	Program to Convert String to integer.	//int x= Integer.ParseInt("123");
public static int StringToInteger(String str){
	int sum=0, lenght=str.length();

	for (int i=0; i<lenght; i++)
	{
		if (str.charAt(i)<'0' || str.charAt(i)>'9')
		{
			System.out.println("error");
			return 0;
		}
		
		else
			sum =sum*10 + (str.charAt(i)-'0'); 
	}
	return sum;
}

//	4. 	Program to Convert integer to String.
public static String IntegerToString(int x)
{	
	String str= String.valueOf(x);
	return str;

	// 	String str= "" + x;
	//	String str= String.valueOf(x);


}

//	5. 	Program to remove given character from a String.

public static String Remove_Char_From_String(String str, char ch){

	int lenght = str.length();
	String temp_str="";			
	
	for (int i=0; i<lenght; i++)
	{
		if(ch!=str.charAt(i))
		{
			temp_str=temp_str.concat(String.valueOf(str.charAt(i)));			//or temp_str=temp_str + str.charAt(i);
		}		
	}	
	return temp_str;
}



//	6.	Program to get Character count from a String for a given character.
public static int GetCharCountInString(char ch, String str){
	
	int lenght =str.length(),count=0;
	
	for (int i=0;i<lenght;i++)
	{
		if(ch==str.charAt(i))
		count++;
	}	
	return count;
}

//6.1	Program to remove duplicate char from String
public static String RemoveDuplicateCharFromString(String str){

	String temp_str="";
	int lenght = str.length(),count=0;
	
	for (int i=0;i<lenght;i++)
		{	
			count=0;
			int temp_str_lenght=temp_str.length();
			
			for(int j=0;j<temp_str_lenght;j++)
				{
					if(temp_str.charAt(j)==str.charAt(i))
					count=count+1;
				}	

			if (count==0)
				temp_str=temp_str+str.charAt(i);
		}	
	
	return temp_str;
}

//6.2	Program to get all char and its count in String.	/e.g. String = "ABDCD"  o/p :: A1 B1 D2	C1
public static void GetAllCharAndItsCountFromString(String str)
{
	String temp_str=RemoveDuplicateCharFromString(str);	
	int temp_str_lenght= temp_str.length();

	for(int i=0;i<temp_str_lenght;i++)
		{
			System.out.println(temp_str.charAt(i)+"-"+GetCharCountInString(temp_str.charAt(i),str));			
		}
}


//	7.	Program to get all permutations of String.	

/*	**************	PROGRAMS on NUMBERS	****************************** */
/*	**************	******************	****************************** */
	
//	8.	Write a program to Check if given Number is ArmStrong Number. 	/*	e.g.	153	==>	1^3 + 5^3 + 3^3 = 153	*/
public static boolean ChekIfGivenNumberIsArmStrong_Number(int num)
{
	
	int temp_num=num, x, sum=0;
	
	while(temp_num>0)
	{
		x=temp_num%10;
		sum= sum + x*x*x;
		temp_num=temp_num/10;
	}
	
	if (sum==num) return true;
	else return false;
			
}

//	9.	Write a program to Check if given Number is Magic Number. 		/*	e.g.	1729	==>	1+7+2+9 = 19 ==> 19*91=1729		*/
public static boolean Chek_If_NuberIs_MagicNumber(int num){
	
	int temp_num=num, sum=0;
	
	while(temp_num>0)
	{
		sum=sum+temp_num%10;
		temp_num=temp_num/10;		
	}
	
	int temp_sum=sum,rev_sum=0;
	while (temp_sum>0)
	{		
		rev_sum = rev_sum*10+temp_sum%10;
		temp_sum=temp_sum/10;
	}
	
	System.out.println(sum);
	if (num==sum*rev_sum) return true;
	else return false;
		
}


//	10.	Write a program to reverse a number 	/* e.g. 123 ==>	o/p	:: 321	*/
public static int ReverseNumber(int num){
	int rev_num=0;
	
	while(num>0){
		rev_num = rev_num*10 +num%10;
		num=num/10;	
	}	
	return rev_num;
}


//	10.1	Check given number is palindrome number.   /* e.g. 121	::number and its reverse are equal	*/

public static boolean CheckIfNumberIsPalindrom(int num){
	int temp_num=num, rev_num=0;
	
	while(temp_num>0){		
		rev_num=rev_num*10+temp_num%10;
		temp_num=temp_num/10;
	}
	
	if (rev_num==num) return true;
	else return false;
}
		
//	11.	Check Given number is even or odd

public static void check_for_odd_or_even(int num)
{	
	if (num%2==0)
		System.out.println("Even number");
	else 
		System.out.println("Odd number");
}
	
//	12.	Check Given number is Prime Number //Should be divisible by itself

public static void CheckforPrimeNumber(int num)
{
	int FLAG=0;
	for (int i=2;i<num;i++)
	{
		if (num%i==0)
		{
			System.out.println("Not a Prime Number");
			FLAG=1;
			break;
		}
	}	
	if(FLAG==0)
	System.out.println("It is a Prime Number");
}

	
//	13.	Write a program to find factorial of a number

public static int Factorial_01(int num){
	int fact=1;
	
	for (int i=0;i<num;i++)
		fact=fact*(num-i);
	
	return fact;
}


//13.	Write a program to find factorial of a number using recursion

public static int Factorial_02(int num){
	if(num==1)
		return num;
	else
		return num*Factorial_02(num-1); 
}







// 	14.	Check Given number is Power of 2 	/* e.g. 16 is power of 2 */

public static void checkIfNumberIsPowerOfTwo(int num)
{
	System.out.println(num);
	int flag=0;
	
	while(num>1)
	{
		if(num%2!=0)
		{
			flag=1;
			break;
		}
		num=num/2;
	}

	if(flag==0)
		System.out.println("Number is power of 2");
	else	
		System.out.println("Number is not power of 2");
	
}

	
//	15.	Write a program to convert from Decimal to binary 	e.g. 8 = 
	
public static void decimal_to_binary(int num)
{

	int arr[] = new int [100];
	
	int i=0;
	
	while (num>0)
	{
		arr[i] = num%2;
		num=num/2;
		i++;
	}
	
	for (int j=i-1;j>=0; j--)
	{
		System.out.println(arr[j]);
	
	}
	
}

//	16.	Write a program to convert from binary to Decimal
public static void binary_to_decimal(int num) 	// e.g. 1010 = 1*2^3 + 0 + 1*2^1 + 0
{	
	int sum=0;

	for(int i=0; num>0; i++)
		{	
			if(num%10!=0)
				sum = (int) (sum + Math.pow(2, i));				
			num=num/10;		
		}
	System.out.println(sum);
}



//	17.	Write a program to print fibonacie Series	
public static void PrintFibbonacie_series(int max){
	int firstno=0,secno=1,sum=0;
	
	LinkedList<Integer> lst = new LinkedList<Integer>(); 
	
				for(int i=0;sum<max;i++)
				{
					if(i==0) sum=0;
					else if (i==1) sum=1;
					else 
						{
							sum=firstno+secno;
							firstno=secno;
							secno=sum;
						}
						if (sum>max) break;
						lst.add(sum);
				}		
		
		for (int a: lst)
		{
			System.out.println(a);
		}
}


//17.1 print fibbonacies series

public static void PrintFibbonacie_series_01(){
	int a=0,b=1,sum=0,max_no=10; 
	
	System.out.println(a);
	System.out.println(b);
	
	for(int i=2;i<max_no;i++)
		{
			sum=a+b;
			a=b;
			b=sum;
			System.out.println(sum);
		}
}

public static void PrintFibbonacie_series_02(){
	int a=0,b=1,sum=0,max_no=10; 
	
	for(int i=0;i<max_no;i++)
		{
		if(i==0) sum=0;
		else if(i==1) sum=1;
		else
			{
				sum =a+b;
				a=b; b=sum;
			}
			System.out.println(sum);
		}
}

/*	**************	PROGRAMS on ARRAYS	****************************** */
//	18.	Array sort using bubble sort(sequential compare and swap), selection sort(find smallest put @ last), quick sort, merge sort, insertion sort
	
//	19.	Remove duplicates from array.

public static void removeDuplicateFromArray()
{
	
	System.out.println("test");	
	int arr[] = {5, 4, 3,2 , 2, 3, 1};
	int len =arr.length;
	LinkedList<Integer> lst= new LinkedList<Integer>();
	
	for(int i=0;i<len;i++)
	{		
		if(!lst.contains(arr[i]))
		lst.add(arr[i]);			
	}
	
	for( int x: lst)
	System.out.println(x);
	
}

//	20.	Check if duplicate exist in array.
public static void Chek_If_Duplicate_Exists(){

	int arr[]={9,4,7,5,6};
	int arr_len= arr.length;int count=0;
	
	for (int i=0; i<arr_len;i++)
	{
		for(int j=0;j<arr_len;j++)
		{
			if(i!=j && arr[i]==arr[j]){
				count =1; break;}
		}		
	}	
	
	if(count!=0)
		System.out.println("Duplicate exist.");
	else
		System.out.println("Duplicate not exist.");

}

// You need to write program to take 1 on one side and 0 on other side for array
//1) Count the number of 0s. Let count be C.
//2) Once we have count, we can put C 0s at the beginning and 1s at the remaining n – C positions in array.
public static void rarragne_one_and_zero()
{	
	int arr[]= {1,0,1,1,1,0,1};	
	int arr_lenght=arr.length;
	//System.out.println(arr_lenght);
	
	int var_count=0;
		
	for(int i=0;i<arr_lenght;i++ ){		
		if(arr[i]==0){
			var_count=var_count+1;
		}		
	}
	
	for(int j=0;j<arr_lenght;j++ )
	{
		if(j<2)
			arr[j]=0;
		else 
			arr[j]=1;
	}

	for(int i : arr)
	System.out.println(arr);
	
}


//Sort array uing bubble sort
public static void rarragne_one_and_zero_01()
{	
	int arr[]= {1,0,1,1,1,0,1};	
	int arr_lenght=arr.length;
	//System.out.println(arr_lenght);
		
	for(int i : arr)
	System.out.println(arr);
	
}


/*	**************	OTHER PROGRAMS 	****************************** */	

// write a program to check if the given year is Leap Year
	


/*	**************	STACK 	****************************** */
//Stack implementation in array Push, Pop, getTop, getSize, isEmpty

//initialize stack
public int top;
public int item[];


public void StackTest(int size)
{
	top = -1;
	item = new int[size];
}

public void Push(int data)
{
	 
	if(top== item.length - 1)
		System.out.println("stack is full");
	else
	{
		item[++top]=data;
		
	}
		
}

public int Pop_Stack()
{		
	if(top < 0)
	{
		System.out.println("stack is empty");
		return 0;
	}
	else
	{
		return item[top--];
	}
}

public int getTop()
{		
	if(top < 0)
	{
		System.out.println("stack is empty");
		return 0;
	}
	else
	{
		return item[top];
	}
}

public int getSize()
{		
		return top+1;
}


public void Print_Stack()
{		
	System.out.println("PRINT STACK");
	System.out.println("____________");
	for (int i=0;i<=top;i++) {
		System.out.println(item[i]);
	}
		
	System.out.println("____________");
}


/*	**************	QUE ****************************** */
//Stack implementation in array Push, Pop, getTop, getSize, isEmpty

























}